// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum EngagementType {
  LIKE
  DISLIKE
  VIEW
  SAVE
  FOLLOW
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  backgroundImage  String?           @db.Text
  handle           String?           @unique
  videos           Video[]
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  VideoEngagement VideoEngagement[]
  Comment       Comment[]
}

model Video {
  id               String            @id @default(cuid())
  title            String?           @db.Text
  thumbnailUrl     String?           @db.Text
  description      String?           @db.Text
  videoUrl         String            @db.Text
  publish          Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  VideoEngagement VideoEngagement[]
  Comment       Comment[]

  @@index([userId])
}

model VideoEngagement {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  engagementType EngagementType
  userId         String?
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId        String?
  video          Video?          @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model Comment{
  id             String         @id @default(cuid())
message String @db.Text
createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId        String
  video          Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([videoId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
